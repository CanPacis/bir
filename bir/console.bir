use "std"


print [message] {
  decoder implements uint16decoder
  decoder:write (message)

  for decoder:length (0) as i {
    bir:output (decoder:read (i))
  }

  bir:output (done)
}

println [message] {
  print (message)
  bir:push (10)
  return bir:output ()
}

uint16decoder:verb [n] {
  init {
    let index = 0

    for 10 as i {
      [Write 1000000 + i, i + 48]
    }
  }

  switch verb {
    case write {
      for n log as i {
        let value = {n / {10^i}} % 10
        [Write n log - 1 - index, value]
        index++
      }
    }
    case read {
      return [Read 1000000 + [Read n]]
    }
    case length {
      return index
    }
    default {
      throw unknown
    }
  }
}


console:verb [value] {
  init {
    let index = 0
  }

  switch verb {
    case write {
      [Write index, value]
      index++
      return 0
    }
    case read {
      return [Read value]
    }
    case length {
      return index
    }
    case input {
      let d = -1
      bir:input (1)

      while d !== done {
        d = bir:input (0)

        if d !== done {
          [Write index, d]
          index++
        }
      }

      return 0
    }
    case output {
      for index as i {
        bir:output ([Read i])
      }

      return bir:output (done)
    }
    default {
      throw unknown
    }
  }
}