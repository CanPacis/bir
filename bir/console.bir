use "std"
use "scope"


print [message] {
  decoder implements uint16decoder
  decoder:push (message)

  for decoder:length (0) as i {
    bir:output (decoder:read (i))
  }

  bir:output (done)
}

println [message] {
  print (message)
  bir:output (10)
  return bir:output (done)
}

uint16decoder:verb [n] {
  init {
    let index = 0

    for 10 as i {
      scope:push (1000000 + i, i + 48)
    }
  }

  switch verb {
    case push {
      for n log as i {
        let value = {n / {10^i}} % 10
        scope:push (n log - 1 - index, value)
        index++
      }
    }
    case read {
      return scope:read(1000000 + scope:read(n, 0), 1)
    }
    case length {
      return index
    }
    default {
      throw unknown
    }
  }
}


console:verb [value] {
  init {
    let index = 0
  }

  if verb == write {
    index++
    scope:push (index, value, 1)
    return 0
  } elif verb == read {
    return scope:read (value, 0, 1)
  } elif verb == update {
    index = value
    return -1
  } elif verb == length {
    return index
  } elif verb == input {
    let d = -1
    __implementor_interface__:input (1)

    while d !== done {
      index += 1
      d = __implementor_interface__:input (0)

      if d !== done {
        scope:push (index, d, 3)
      }
    }

    return 0
  } elif verb == output {

    for index as i {
      __implementor_interface__:output (scope:read (i, 0, 2))
    }

    return __implementor_interface__:output (done)
  } else {
    return -1
  }
}