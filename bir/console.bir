use "std"
use "decoder"

print [message] {
  decoder implements uint16decoder
  decoder:write (message)

  for decoder:length (0) as i {
    bir:push (decoder:read (i))
  }

  bir:output ()
}

println [message] {
  print (message)
  bir:push (10)
  return bir:output ()
}

console:verb [value] {
  init {
    let index = 0
  }

  switch verb {
    case write {
      [Write index, value]
      index++
      return 0
    }
    case read {
      return [Read value]
    }
    case length {
      return index
    }
    case input {
      let d = -1
      bir:input (1)

      while d !== done {
        d = bir:input (0)

        if d !== done {
          [Write index, d]
          index++
        }
      }

      return 0
    }
    case output {
      for index as i {
        bir:output ([Read i])
      }

      return bir:output (done)
    }
    default {
      throw unknown
    }
  }
}